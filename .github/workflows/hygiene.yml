name: Code Quality (Hygiene)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_PREFIX: 'hygiene-node-modules'
  FORCE_COLOR: '1'
  CI: 'true'

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          check-latest: true

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            node_modules
            ~/.eslintcache
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-
            hygiene-node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: |
          # Check if we have package-lock.json, yarn.lock, or pnpm-lock.yaml
          if [ -f "pnpm-lock.yaml" ]; then
            corepack enable pnpm
            pnpm install --frozen-lockfile --prefer-offline
          elif [ -f "yarn.lock" ]; then
            corepack enable yarn
            yarn install --immutable --prefer-offline
          else
            npm ci --prefer-offline --no-audit
          fi

      - name: Run ESLint
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            npm run lint
          elif [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0 --cache --cache-location ~/.eslintcache --format=stylish
          else
            echo "No ESLint configuration found, skipping lint check"
          fi

      - name: Annotate ESLint results
        uses: ataylorme/eslint-annotate-action@v3
        if: failure()
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint-report.json"

  format:
    name: Prettier
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          check-latest: true

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            node_modules
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-
            hygiene-node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: |
          # Check if we have package-lock.json, yarn.lock, or pnpm-lock.yaml
          if [ -f "pnpm-lock.yaml" ]; then
            corepack enable pnpm
            pnpm install --frozen-lockfile --prefer-offline
          elif [ -f "yarn.lock" ]; then
            corepack enable yarn
            yarn install --immutable --prefer-offline
          else
            npm ci --prefer-offline --no-audit
          fi

      - name: Check Prettier formatting
        run: |
          if [ -f "package.json" ] && grep -q '"format:check"' package.json; then
            npm run format:check
          elif [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
            npx prettier --check "**/*.{js,jsx,ts,tsx,json,md,yml,yaml}" --ignore-path .gitignore
          else
            echo "No Prettier configuration found, skipping format check"
          fi

      - name: Show formatting diff
        if: failure()
        run: |
          if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
            echo "Files that need formatting:"
            npx prettier --list-different "**/*.{js,jsx,ts,tsx,json,md,yml,yaml}" --ignore-path .gitignore || true
          fi

  typecheck:
    name: TypeScript
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          check-latest: true

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            node_modules
            ~/.tscache
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml', '**/tsconfig*.json') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-
            hygiene-node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: |
          # Check if we have package-lock.json, yarn.lock, or pnpm-lock.yaml
          if [ -f "pnpm-lock.yaml" ]; then
            corepack enable pnpm
            pnpm install --frozen-lockfile --prefer-offline
          elif [ -f "yarn.lock" ]; then
            corepack enable yarn
            yarn install --immutable --prefer-offline
          else
            npm ci --prefer-offline --no-audit
          fi

      - name: TypeScript type check
        run: |
          if [ -f "tsconfig.json" ]; then
            if [ -f "package.json" ] && grep -q '"typecheck"' package.json; then
              npm run typecheck
            else
              npx tsc --noEmit --incremental --tsBuildInfoFile ~/.tscache/buildinfo
            fi
          else
            echo "No TypeScript configuration found, skipping type check"
          fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          check-latest: true

      - name: Install dependencies
        run: |
          # Check if we have package-lock.json, yarn.lock, or pnpm-lock.yaml
          if [ -f "pnpm-lock.yaml" ]; then
            corepack enable pnpm
            pnpm install --frozen-lockfile --prefer-offline
          elif [ -f "yarn.lock" ]; then
            corepack enable yarn
            yarn install --immutable --prefer-offline
          else
            npm ci --prefer-offline --no-audit
          fi

      - name: Run security audit
        run: |
          if [ -f "package.json" ]; then
            npm audit --audit-level=moderate
          else
            echo "No package.json found, skipping security audit"
          fi

      - name: Check for known vulnerabilities
        run: |
          if command -v npx >/dev/null 2>&1 && [ -f "package.json" ]; then
            npx audit-ci --moderate || echo "audit-ci not available or no vulnerabilities found"
          fi
        continue-on-error: true